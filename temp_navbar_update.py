# -*- coding: utf-8 -*-
from pathlib import Path

path = Path(r'c:\Users\fower\Desktop\meridesignhouse\src\components\layout\Navbar.tsx')
text = path.read_text(encoding='utf-8')

text = text.replace("import { motion, useReducedMotion } from 'framer-motion'", "import { motion, useReducedMotion, AnimatePresence } from 'framer-motion'")
text = text.replace("import { MagnifyingGlassIcon, UserIcon, Bars3Icon, XMarkIcon } from '@heroicons/react/24/outline'", "import { MagnifyingGlassIcon, UserIcon, Bars3Icon, XMarkIcon, ChevronUpIcon } from '@heroicons/react/24/outline'")

text = text.replace("const [isCompact, setIsCompact] = useState(false)\r\n  const lastScrollYRef = useRef(0)\r\n  const tickingRef = useRef(false)", "const [navStage, setNavStage] = useState(0)\r\n  const navStageRef = useRef(0)\r\n  const lastScrollYRef = useRef(0)\r\n  const scrollRafRef = useRef<number | null>(null)\r\n  const [showDesktopBackToTop, setShowDesktopBackToTop] = useState(false)\r\n  const [showMobileBackToTop, setShowMobileBackToTop] = useState(false)")

text = text.replace("const mobileNavPillBase = 'inline-flex shrink-0 items-center gap-1.5 rounded-full px-3 py-1.5 text-xs font-medium whitespace-nowrap transition-all duration-300 backdrop-blur-md border border-white/60 bg-white/70 text-rose-700 shadow-sm'\r\n  const mobileNavPillOutline = 'border-rose-200/70 hover:border-rose-300 hover:bg-rose-50/80'\r\n\r\n", "const mobileNavPillBase = 'inline-flex shrink-0 items-center gap-1.5 rounded-full px-3 py-1.5 text-xs font-medium whitespace-nowrap transition-all duration-300 backdrop-blur-md border border-white/60 bg-white/70 text-rose-700 shadow-sm'\r\n  const mobileNavPillOutline = 'border-rose-200/70 hover:border-rose-300 hover:bg-rose-50/80'\n\n  const isCompact = navStage > 0\n  const hideCategoryLayer = navStage >= 2\n  const hideMainDesktopNav = navStage >= 3\n  const headerShadowClass = navStage >= 3 ? 'shadow-sm' : navStage >= 1 ? 'shadow-md' : 'shadow-lg'\n  const infoBarVisibilityClass = navStage >= 1 ? 'h-0 opacity-0 -translate-y-2 pointer-events-none' : 'h-10 opacity-100 translate-y-0'\n  const desktopNavVisibilityClass = hideMainDesktopNav ? 'h-0 opacity-0 pointer-events-none -translate-y-2' : 'h-12 opacity-100 translate-y-0'\n  const categoryNavVisibilityClass = hideCategoryLayer ? 'h-0 opacity-0 pointer-events-none -translate-y-2' : 'h-auto opacity-100 translate-y-0'\n\n")

old_scroll_block = "  // Compact/expand davranışı: aşağı kayınca kompakt, yukarıda geniş\r\n  useEffect(() => {\r\n    let lastTime = 0\r\n    const onScroll = () => {\r\n      if (tickingRef.current) return\r\n      tickingRef.current = true\r\n      requestAnimationFrame(() => {\r\n        const y = window.scrollY || 0\r\n        const last = lastScrollYRef.current\r\n        const now = Date.now()\r\n        const deltaTime = now - lastTime\r\n        lastTime = now\r\n        \r\n        // Dinamik threshold: yavaş scroll'da daha düşük threshold\r\n        const scrollDelta = Math.abs(y - last)\r\n        const scrollSpeed = scrollDelta / (deltaTime || 16) // pixels per ms\r\n        const dynamicThreshold = scrollSpeed < 0.5 ? 3 : 8 // Yavaş scroll'da 3px, hızlı scroll'da 8px\r\n        \r\n        if (y > last + dynamicThreshold && y > 60) {\r\n          setIsCompact(true)\r\n        } else if (y < last - dynamicThreshold) {\r\n          setIsCompact(false)\r\n        }\r\n        lastScrollYRef.current = y\r\n        tickingRef.current = false\r\n      })\r\n    }\r\n    window.addEventListener('scroll', onScroll, { passive: true })\r\n    return () => window.removeEventListener('scroll', onScroll)\r\n  }, [])"

new_scroll_block = "  useEffect(() => {\n    if (typeof window === 'undefined') return\n\n    const handleScroll = () => {\n      if (scrollRafRef.current is not None):\n        return\n\n      scrollRafRef.current = window.requestAnimationFrame(lambda: None)\n    }\n  }, [])"
